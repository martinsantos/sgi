const mysql = require('mysql2/promise');
require('dotenv').config();

// Configuraci√≥n de la conexi√≥n a la base de datos
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'ultimami_sgi',
  port: parseInt(process.env.DB_PORT) || 3306,
  socketPath: process.env.DB_SOCKET, // Usar socket en lugar de TCP
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
  charset: 'utf8mb4',
  timezone: '-03:00', // Zona horaria de Argentina
  // Habilitar soporte para m√∫ltiples statements (con precauci√≥n)
  multipleStatements: false,
  // Configuraci√≥n adicional para manejo de fechas
  dateStrings: true,
  typeCast: function (field, next) {
    if (field.type === 'DATETIME' || field.type === 'TIMESTAMP') {
      return field.string();
    }
    return next();
  }
};

// Crear el pool de conexiones
const pool = mysql.createPool(dbConfig);

// Manejador de eventos para el pool
pool.on('acquire', (connection) => {
  console.log('Conexi√≥n %d adquirida', connection.threadId);
});

pool.on('release', (connection) => {
  console.log('Conexi√≥n %d liberada', connection.threadId);
});

// Probar la conexi√≥n
async function testConnection() {
  let connection;
  try {
    connection = await pool.getConnection();
    console.log('‚úÖ Conexi√≥n exitosa a la base de datos');
    
    // Obtener informaci√≥n de la versi√≥n de MySQL
    const [rows] = await connection.query('SELECT VERSION() as version');
    console.log(`üìä Versi√≥n de MySQL: ${rows[0].version}`);
    
    // Verificar tablas principales
    const [tables] = await connection.query(
      `SELECT COUNT(*) as count FROM information_schema.tables 
       WHERE table_schema = ?`, 
      [dbConfig.database]
    );
    
    console.log(`üóÑÔ∏è  Tablas en la base de datos: ${tables[0].count}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå Error al conectar a la base de datos:', error.message);
    console.error('üîß Configuraci√≥n de conexi√≥n:', {
      host: dbConfig.host,
      port: dbConfig.port,
      database: dbConfig.database,
      user: dbConfig.user,
      password: dbConfig.password ? '*****' : '(no password)'
    });
    
    if (error.code === 'ECONNREFUSED') {
      console.error('üîå No se pudo conectar al servidor MySQL. Verifica que el servidor est√© en ejecuci√≥n.');
    } else if (error.code === 'ER_BAD_DB_ERROR') {
      console.error(`üìÇ La base de datos "${dbConfig.database}" no existe.`);
    } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.error('üîë Error de autenticaci√≥n. Verifica el usuario y la contrase√±a.');
    }
    
    return false;
  } finally {
    if (connection) await connection.release();
  }
}

// Probar la conexi√≥n al iniciar
if (process.env.NODE_ENV !== 'test') {
  testConnection().then(success => {
    if (!success) {
      console.error('‚ö†Ô∏è  La aplicaci√≥n puede no funcionar correctamente debido a problemas de conexi√≥n a la base de datos.');
    }
  });
}

module.exports = pool;

// Exportar tambi√©n las funciones √∫tiles
module.exports.testConnection = testConnection;
