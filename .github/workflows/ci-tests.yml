name: CI - Tests Automáticos

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  tests:
    name: Ejecutar Suite de Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🟢 Configurar Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 📦 Instalar dependencias
        run: npm ci
      
      - name: 🔍 Verificar sintaxis (Lint)
        run: npm run lint --if-present
        continue-on-error: true
      
      - name: 🧪 Ejecutar tests
        run: npm test -- --coverage --maxWorkers=2
        env:
          NODE_ENV: test
      
      - name: 📊 Generar reporte de coverage
        run: npm test -- --coverage --coverageReporters=lcov --maxWorkers=2
        continue-on-error: true
      
      - name: 📈 Subir coverage a Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true
      
      - name: ✅ Validar coverage mínimo
        run: |
          echo "Validando coverage mínimo de 50%..."
          COVERAGE=$(npm test -- --coverage --coverageReporters=json-summary 2>&1 | grep -oP '"statements":\s*\K[0-9.]+' | head -1)
          echo "Coverage actual: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 50" | bc -l) )); then
            echo "❌ Coverage insuficiente: ${COVERAGE}% (mínimo: 50%)"
            exit 1
          fi
          echo "✅ Coverage OK: ${COVERAGE}%"
        continue-on-error: true
      
      - name: 🎯 Verificar tests críticos
        run: |
          echo "Verificando que tests críticos pasaron..."
          npm test 2>&1 | tee test_output.txt
          if grep -q "Test Suites:.*failed" test_output.txt; then
            echo "❌ Algunos tests fallaron"
            exit 1
          fi
          echo "✅ Todos los tests pasaron"
      
      - name: 📋 Resumen de resultados
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 RESUMEN DE CI"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Autor: ${{ github.actor }}"
          npm test -- --verbose 2>&1 | tail -20
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  security-check:
    name: Análisis de Seguridad
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🟢 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: 📦 Instalar dependencias
        run: npm ci
      
      - name: 🔒 Audit de vulnerabilidades
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: 🔍 Verificar dependencias desactualizadas
        run: npm outdated || true

  build-check:
    name: Verificar Build
    runs-on: ubuntu-latest
    needs: tests
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🟢 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: 📦 Instalar dependencias
        run: npm ci
      
      - name: 🏗️ Verificar que el proyecto compila
        run: |
          echo "Verificando integridad del proyecto..."
          if [ -f "package.json" ]; then
            echo "✅ package.json encontrado"
          fi
          if [ -d "src" ]; then
            echo "✅ Directorio src encontrado"
          fi
          if [ -d "tests" ]; then
            echo "✅ Directorio tests encontrado"
          fi
          echo "✅ Estructura del proyecto OK"
